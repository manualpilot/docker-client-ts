import { Pool } from "undici";
import { Observable } from "rxjs";
import { z } from "zod";
import { chunked, sub, terminal } from "~/etc";

{% for endpoint in endpoints %}

{% if endpoint.input_type %}
export const {{ endpoint.input_name }} = {{ endpoint.input_type }};
{% endif %}

{% if endpoint.output_type %}
export const {{ endpoint.output_name }} = {{ endpoint.output_type }};
{% endif %}

export const {{ endpoint.error_name }} = {{ endpoint.error_type }};

{% endfor %}

export default function {{ tag }}(pool: Pool) {
  return {
{% for endpoint in endpoints %}
    {{ endpoint.name }}: async (
    {% if endpoint.input_type %}
      input{% if endpoint.input_required %}?{% endif %}: z.infer<typeof {{ endpoint.input_name }}>,
    {% endif %}
    ): Promise<
    {% if endpoint.upgrade %}
      ReturnType<typeof terminal>
    {% elif endpoint.chunked %}
      Observable<string>
    {% elif endpoint.output_type %}
      z.infer<typeof {{ endpoint.output_name }}>
    {% else %}
      void
    {% endif %}
    > => {

    {% if endpoint.upgrade %}

      const resp = await pool.upgrade({
        method: "{{ endpoint.method }}",
        {% if endpoint.path_has_params %}
        path: sub("{{ endpoint.path }}", input.path),
        {% else %}
        path: "{{ endpoint.path }}",
        {% endif %}
        // TODO: how do we post initial body? by the time upgrade returns, response headers already posted
      });

      return terminal(resp);

    {% else %}

      const resp = await pool.request({
        method: "{{ endpoint.method }}",
        {% if endpoint.path_has_params %}
        path: sub("{{ endpoint.path }}", input.path),
        {% else %}
        path: "{{ endpoint.path }}",
        {% endif %}
        {% if endpoint.input_has_query %}
        query: input{% if endpoint.input_required %}?{% endif %}.query,
        {% endif %}
        headers: {
          {% if endpoint.input_has_body %}
            "Content-Type": "application/json",
          {% endif %}
        },
        {% if endpoint.input_has_body %}
        body: JSON.stringify(input.body),
        {% endif %}
      });

      if (resp.statusCode >= 200 && resp.statusCode <= 299) {
        {% if endpoint.chunked %}
          return chunked(resp);
        {% elif endpoint.output_type %}
          return {{ endpoint.output_name }}.parse(await resp.body.json());
        {% else %}
          return;
        {% endif %}
      }

      const errorBody = await resp.body.json() as object;
      throw {{ endpoint.error_name }}.parse({ code: resp.statusCode, ...errorBody });

    {% endif %}
    },
{% endfor %}
  };
}
