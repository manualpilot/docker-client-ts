import { Pool } from "undici";

import { DockerClientParams } from "~/etc";
import { setupSSH } from "~/ssh";

{% for tag in tags %}
import {{ tag }} from "~/tags/{{ tag | lower }}"
{% endfor %}

export async function DockerClient(params: DockerClientParams) {
  const { pool, close } = await getPool(params);

  return {
  {% for tag in tags %}
    {{ tag }}: {{ tag }}(pool),
  {% endfor %}
    close: async () => {
      await pool.close();
      if (close) {
        await close();
      }
    }
  };
}

async function getPool(params: DockerClientParams): Promise<{ pool: Pool, close?: () => Promise<void> }> {
  const defaultParams: Pool.Options = {
    headersTimeout: 30_000,
  };

  if (params.ssh) {
    const { socketPath, close } = await setupSSH(params);

    return {
      close,
      pool: new Pool("http://localhost", {
        socketPath,
        ...defaultParams,
      }),
    };
  }

  if (params.baseURL.protocol === "unix:") {
    return {
      pool: new Pool("http://localhost", {
        socketPath: params.baseURL.pathname,
        ...defaultParams,
      }),
    };
  }

  return { pool: new Pool(params.baseURL, defaultParams) };
}
